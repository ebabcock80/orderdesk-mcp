version: '3.8'

services:
  # OrderDesk MCP Server - Production Configuration
  mcp:
    build:
      context: .
      dockerfile: Dockerfile
    image: orderdesk-mcp-server:production
    container_name: orderdesk-mcp-production
    env_file: .env
    volumes:
      - mcp_data:/app/data:rw
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=sqlite:////app/data/app.db
      - CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_WEBUI=${ENABLE_WEBUI:-true}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Required for production multi-instance caching
  redis:
    image: redis:7-alpine
    container_name: orderdesk-redis-production
    volumes:
      - redis_data:/data:rw
    ports:
      - "127.0.0.1:6379:6379"  # Only expose to localhost
    restart: always
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # nginx - Reverse proxy with SSL/TLS termination
  nginx:
    image: nginx:alpine
    container_name: orderdesk-nginx-production
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx:rw
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      - mcp
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

volumes:
  mcp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Production Deployment Notes
# =============================================================================
#
# Prerequisites:
# 1. Copy production.env to .env and update all secrets
# 2. Generate SSL/TLS certificates (Let's Encrypt recommended)
# 3. Configure nginx.conf with your domain
# 4. Set up monitoring (Prometheus + Grafana)
# 5. Configure backup automation
#
# Deployment:
#   docker-compose -f docker-compose.production.yml up -d
#
# Scaling:
#   docker-compose -f docker-compose.production.yml up -d --scale mcp=3
#
# Updates:
#   docker-compose -f docker-compose.production.yml pull
#   docker-compose -f docker-compose.production.yml up -d --no-deps mcp
#
# Backup:
#   docker-compose -f docker-compose.production.yml exec mcp \
#     sqlite3 /app/data/app.db ".backup '/app/data/backup.db'"
#
# Health Check:
#   curl https://yourdomain.com/health
#   curl https://yourdomain.com/health/ready
#
# Logs:
#   docker-compose -f docker-compose.production.yml logs -f mcp
#
# Metrics:
#   curl https://yourdomain.com/metrics
#
