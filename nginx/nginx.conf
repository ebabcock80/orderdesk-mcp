# ============================================================================
# nginx Production Configuration for OrderDesk MCP Server
# ============================================================================
#
# Features:
# - Load balancing across multiple MCP instances
# - Health checks and automatic failover
# - SSL/TLS termination
# - Security headers
# - Request rate limiting
# - Compression
#
# ============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_status 429;

    # Upstream MCP servers (load balanced)
    upstream mcp_backend {
        least_conn;  # Load balancing algorithm
        
        # MCP server instances (Docker Compose service name)
        server mcp:8000 max_fails=3 fail_timeout=30s;
        
        # Keepalive connections
        keepalive 32;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Allow health checks over HTTP
        location /health {
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            access_log off;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name _;

        # SSL/TLS Configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

        # Max request size
        client_max_body_size 10M;

        # Health check (no rate limit, no auth)
        location /health {
            limit_req zone=general burst=20 nodelay;
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }

        # Metrics endpoint (protected - restrict access in production)
        location /metrics {
            limit_req zone=general burst=10 nodelay;
            
            # Restrict to internal networks (uncomment in production)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;
            
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints (rate limited)
        location / {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
    }
}

# ============================================================================
# Configuration Notes
# ============================================================================
#
# SSL/TLS Certificates:
# - Place fullchain.pem and privkey.pem in nginx/ssl/
# - Use Let's Encrypt, self-signed, or Cloudflare
# - See DEPLOYMENT-DOCKER.md for certificate setup
#
# Load Balancing:
# - Algorithm: least_conn (sends to least busy server)
# - Health checks: max_fails=3, fail_timeout=30s
# - Automatic failover if instance unhealthy
#
# Rate Limiting:
# - General endpoints: 10 requests/second
# - API endpoints: 100 requests/second
# - Bursts allowed for traffic spikes
#
# Security:
# - HSTS enabled (force HTTPS)
# - Security headers prevent XSS, clickjacking, etc.
# - TLS 1.2+ only
# - Modern cipher suites
#
# Performance:
# - HTTP/2 enabled
# - Gzip compression
# - Keepalive connections
# - Request buffering
#
# Monitoring:
# - Detailed access logs with upstream timing
# - Error logs for debugging
# - Health check endpoint at /health
#
# ============================================================================
