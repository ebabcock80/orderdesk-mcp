[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "orderdesk-mcp-server"
version = "0.1.0-alpha"
description = "Native MCP server for OrderDesk API with multi-tenant security and optional web interface"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Eric Babcock", email = "eric.babcock@gmail.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
dependencies = [
    # MCP Protocol
    "mcp>=1.0.0",
    # HTTP Client & Server
    "httpx>=0.27.0",
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.29.0",
    # Data & Validation
    "pydantic>=2.8.0",
    "pydantic-settings>=2.3.0",
    "sqlalchemy>=2.0.30",
    # Security & Crypto
    "cryptography>=42.0.0",
    "argon2-cffi>=23.1.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    # Caching
    "redis>=5.0.0",
    # Logging & Monitoring
    "structlog>=24.2.0",
    "prometheus-client>=0.20.0",
    "psutil>=5.9.0",
    # WebUI (Phase 5)
    "jinja2>=3.1.4",
    "itsdangerous>=2.1.0",
]

[project.optional-dependencies]
webui = [
    # WebUI framework (HTMX + Tailwind per Q6)
    # jinja2 and itsdangerous moved to core dependencies
    "python-multipart>=0.0.9",
    # Email providers
    "aiosmtplib>=3.0.0",
    # Optional: SendGrid, Postmark adapters
]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "black>=24.4.0",
    "types-redis>=4.6.0",
]
e2e = [
    # Playwright for WebUI E2E tests (per Q30)
    "playwright>=1.44.0",
]

[project.urls]
Homepage = "https://github.com/ebabcock80/orderdesk-mcp"
Repository = "https://github.com/ebabcock80/orderdesk-mcp"
Issues = "https://github.com/ebabcock80/orderdesk-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["mcp_server"]

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise from - too strict for our use case
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B017"]  # assert with bare Exception is fine in tests

[tool.mypy]
python_version = "3.12"
# Pragmatic type checking for alpha - catch real bugs, allow incremental typing
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Avoid noise during development
warn_return_any = false
strict_equality = true
# Still check for real errors
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "cryptography.*",
    "redis.*",
    "structlog.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "mcp_server.mcp_server",
    "mcp_server.services.orderdesk",
    "mcp_server.routers.webhooks",
    "mcp_server.routers.orders",
    "mcp_server.routers.products",
    "mcp_server.main",
    "mcp_server.webui.*",
]
# Alpha release - focus on core logic type safety, allow router flexibility
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["mcp_server"]
omit = [
    "mcp_server/mcp_server.py",  # Legacy stdio MCP server (not used in production)
    "mcp_server/services/orderdesk.py",  # Legacy service (replaced by orderdesk_client.py)
    "mcp_server/routers/webhooks.py",  # Phase 5+ feature (not implemented)
    "mcp_server/services/rate_limit.py",  # Will be tested in Phase 7 (production hardening)
    "mcp_server/utils/proxy.py",  # Proxy utilities (tested in integration)
    "mcp_server/auth/middleware.py",  # HTTP middleware (MCP tools use direct auth)
    "mcp_server/services/session.py",  # Session context (integration tested)
    "mcp_server/services/cache.py",  # Cache implementation (integration tested)
    "mcp_server/webui/*",  # WebUI (optional feature, requires browser testing)
    "mcp_server/routers/health.py",  # Health checks (integration tested)
    "mcp_server/utils/metrics.py",  # Metrics (integration tested with Prometheus)
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
